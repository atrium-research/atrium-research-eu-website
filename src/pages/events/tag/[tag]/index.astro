---
import { Image } from "astro:assets";
import { compareDesc } from "date-fns";

import Link from "@/components/link.astro";
import MainContent from "@/components/main-content.astro";
import PageSection from "@/components/page-section.astro";
import PageTitle from "@/components/page-title.astro";
import { defaultLocale as locale } from "@/config/i18n.config";
import PageLayout from "@/layouts/page-layout.astro";
import { tags } from "@/lib/event-tags";
import { getFormatter } from "@/lib/formatter";
import { getImageImport } from "@/lib/get-image-import";
import { createI18n } from "@/lib/i18n";
import { createCollectionResource } from "@/lib/keystatic/resources";

export function getStaticPaths() {
	return tags.map((tag) => {
		return { params: { tag: tag.value } };
	});
}

const { tag } = Astro.params;

const page = await createCollectionResource("pages", locale).read("events");

const events = await createCollectionResource("events", locale).all();
const filteredEvents =
	tag === "all"
		? events
		: events.filter((event) => {
				return event.data.tags.includes(tag);
			});
const sortedEvents = filteredEvents.sort((a, z) => {
	return compareDesc(new Date(a.data.date), new Date(z.data.date));
});

const { t } = await createI18n(locale);

const { content, image, title } = page.data;
const documentTitle = title;
const { default: Content } = await page.compile(content);

const fullTitle =
	tag === "all"
		? title
		: `${title} (${
				tags.find((t) => {
					return t.value === tag;
				})!.label
			})`;
const formatter = getFormatter(locale);
---

<PageLayout locale={locale} title={documentTitle}>
	<MainContent>
		<div class="relative h-56">
			<Image
				alt=""
				class="absolute inset-0 size-full object-cover"
				loading="eager"
				src={getImageImport(image)}
			/>
		</div>
		<PageSection class="my-4 md:my-12">
			<PageTitle>{fullTitle}</PageTitle>
			<div class="prose">
				<Content />
			</div>
			<div>
				<nav aria-label={t("EventsPage.filters")} class="mb-12">
					<ul
						class="flex flex-wrap justify-center gap-x-4 text-lg font-medium text-red-clay"
						role="list"
					>
						{
							tags.map((t) => {
								return (
									<li>
										<a
											aria-current={t.value === tag ? "page" : undefined}
											class="inline-flex rounded-md px-2 py-1 hover:underline focus-visible:outline-red-clay aria-[current]:underline"
											href={`/events/tag/${t.value}`}
										>
											{t.label}
										</a>
									</li>
								);
							})
						}
					</ul>
				</nav>
				<ul class="grid gap-8 grid-fluid-cols-72" role="list">
					{
						sortedEvents.map((event) => {
							const { date: startDate, endDate, image, location, title } = event.data;
							const href = `/events/${event.id}/`;

							return (
								<li>
									<article class="grid gap-y-2">
										<div class="relative mb-2 h-48 overflow-hidden rounded-lg transition hover:bg-granite/50">
											<Link aria-hidden="true" href={href} tabindex={-1}>
												<span class="sr-only">{title}</span>
												<Image
													alt=""
													class="absolute inset-0 size-full object-cover transition hover:opacity-75"
													sizes="620px"
													src={getImageImport(image)}
													widths={[620]}
												/>
											</Link>
										</div>
										<h2 class="font-medium leading-tight text-red-clay transition hover:text-inherit">
											{title}
										</h2>
										<dl class="text-sm text-neutral-700">
											<div class="flex gap-x-2">
												<dt>Date:</dt>
												<dd>
													{endDate != null ? (
														<span>
															{formatter.date.formatRange(new Date(startDate), new Date(endDate))}
														</span>
													) : (
														<time datetime={startDate}>
															{formatter.date.format(new Date(startDate))}
														</time>
													)}
												</dd>
											</div>
											<div class="flex gap-x-2">
												<dt>Location:</dt>
												<dd>{location}</dd>
											</div>
										</dl>
										{/* <div class="text-sm">{summary}</div> */}
									</article>
								</li>
							);
						})
					}
				</ul>
			</div>
		</PageSection>
	</MainContent>
</PageLayout>
